#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<math.h>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};

// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

//check if the tree is balanced or not
Pair checkHeightBalanced(node* root){
    Pair p ;
    if (root == NULL)
    {
        p.height = 0 ;
        p.check = true ;
        return p ;
    }
    //recursive part
    //post order
    Pair leftPair = checkHeightBalanced(root->left) ;
    Pair rightPair = checkHeightBalanced(root->right) ;
    //update height of each node
    p.height = max(leftPair.height , rightPair.height) +1 ;
    //if |h2-h1|<=1 then true otherwise false
    if ((abs(leftPair.height-rightPair.height)<= 1) and leftPair.check and rightPair.check)
    {
        p.check = true ;
    }
    else{
        p.check = false ;
    }
    return p ;   
}

int main(){
    int k ;
   node* root = buildTree() ;
   Pair x = checkHeightBalanced(root) ;
   if (x.check)
   {
       cout<<"balanced!!!" ;
   }
   else{
       cout<<"nooooo!!" ;
   }
   
    return 0;
}
