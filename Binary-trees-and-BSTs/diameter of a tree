#include <iostream>
#include <bits/stdc++.h>
#include<queue>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

//determine the height of the tree
int heightOfNode(node* root){
    if (root == NULL)
    {
        return 0 ;
    }
    int lt = heightOfNode(root->left) ;
    int rt = heightOfNode(root->right) ;
    return max(lt , rt) +1 ;
}


//calculate diameter of a node
int diamterOfNode(node* root){
    if (root == NULL)
    {
        return 0 ;
    }
    //height of the current node
    int h1 = heightOfNode(root->left) ;
    int h2 = heightOfNode(root->right) ;
    int h3 = h1+h2 ;
    //diameter from left part of the root node
    int op1 = diamterOfNode(root->left) ;
    //diameter from right part of the root node
    int op2 = diamterOfNode(root->right) ;
    //return the maximum of above three 
    return max(h3 , max(op1 ,op2)) ; 
}

int main(){
    int k ;
   node* root = buildTree() ;
   //answer will consists of maximum no. of nodes i.e diameter of a tree
   int answer = diamterOfNode(root) ;
   cout<<answer ;
    return 0;
}
