#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<math.h>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};

// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

// print right most elements
void rightView(node* root,int currentLevel , int &maxlevel){
    //base case
    if (root ==NULL)
    {
        return ;
    }
    //traversal :: root->right->left
    //check if level has been changed 
    if (maxlevel<currentLevel)
    {   cout<<root->data<<" " ;
        maxlevel = currentLevel ;
    }
    
    rightView(root->right , currentLevel+1 , maxlevel) ;
    rightView(root->left , currentLevel+1 , maxlevel) ;
    return ;
}

int main(){
   node*root = buildTree() ;
   int maxlevel = -1 ;
   int currentLevel = 0 ;
   rightView(root ,currentLevel, maxlevel) ;
    return 0;

}
