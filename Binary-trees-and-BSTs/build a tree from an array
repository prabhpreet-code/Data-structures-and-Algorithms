#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<math.h>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};

// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

void bfs(node* root){
    queue<node*> q ;
    q.push(root) ;
    q.push(NULL) ;
    while (!q.empty())
    {
        node* f = q.front() ;
        if (f == NULL)
        {   cout<<endl ;
            q.pop() ;
            if (!q.empty())
            {
                q.push(NULL) ;
            }
        }
        else{
            cout<<f->data<<" " ;
            q.pop() ;
         if (f->left)
            {
                q.push(f->left) ;
            }
            if (f->right)
            {
             q.push(f->right) ;
            }
        }
    }
    return ;
}

// to build a tree from an array
node* treeFromArray(int arr[] , int start , int end ){
    if (start>=end)
    {
        return NULL;
    }
    //calculate mid value 
    int mid= (start+end)/2 ;
    //create a new node of mid value
    node* root = new node(arr[mid]) ;
    //recursive part
    root->left = treeFromArray(arr , start , mid) ;
    root->right = treeFromArray(arr , mid+1 , end) ;
    return root ;

}

int main(){
   int arr[] = {1,2,3,4,5,6,7} ;
   int size = sizeof(arr) / sizeof(int) ;
 //  node* root = buildTree() ;
   node* temp = treeFromArray(arr , 0 , size-1) ;
   bfs(temp) ;
   
    return 0;

}
