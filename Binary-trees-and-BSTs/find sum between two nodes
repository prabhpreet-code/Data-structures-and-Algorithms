Problem Name:  Print BST keys in the given range 
Problem Difficulty: None
Problem Constraints: 1 < t < 20 <br>
1 < n < 50
Problem Description:
You are given an array of integers. First of all , You have to form a binary search tree from given integers. Now you have provided two integers k1 and k2. You have to print all nodes of BST within the range k1 and k2 (including k1 and k2).

Input Format: First line contains integer t as number of test cases.
Each test case contains three lines. First line contains an integer n which is length of the array and second line contains n space separated integer. Third line contains the value of k1 and k2. 
Sample Input: 1
5
4 3 2 5 6
3 5

Output Format: For each test case you have to print preorder traversal of the tree first and then print all nodes within the range k1 and k2 (inclusive). Refer to the sample testcase for exact output format.
Sample Output: # Preorder : 4 3 2 5 6 
# Nodes within range are : 3 4 5 
************************************************************************************************************************************************************************

#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<climits>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};


// breadth first search -- to print the tree in o(N) complexity
void bfs(node* root){
    queue<node*> q ;
    q.push(root) ;
    q.push(NULL) ;
    while (!q.empty())
    {
        node* f = q.front() ;
        if (f == NULL)
        {   cout<<endl ;
            q.pop() ;
            if (!q.empty())
            {
                q.push(NULL) ;
            }
        }
        else{
            cout<<f->data<<" " ;
            q.pop() ;
         if (f->left)
            {
                q.push(f->left) ;
            }
            if (f->right)
            {
             q.push(f->right) ;
            }
        }
    }
    return ;
}

//build binary search tree
node* insertBinarySearchTree(node* root , int d){
    //base case
    //whenever there's null make a new node
    if (root == NULL)
    {
        return new node(d) ;
    }
    //check if given data is smaller then root data 
    //link it with left part of the node
    if (root->data > d)
    {
        root->left = insertBinarySearchTree(root->left , d) ;
    }
    //otherwise if bigger than root link it with right side
    if (root->data < d)
    {
        root->right = insertBinarySearchTree(root->right , d) ;
    }
    // no condition is met which means it's same as root then return same value
    return root ;
}

// Function to make a BST
node* buildTree(){
    int d ;
    cin>>d ;
    //initialise first node with null
    node* root = NULL ;
    //take input until -1 is met
    while (d != -1)
    {
        root = insertBinarySearchTree(root , d) ;
        cin>>d ;
    }
    return root ;
    
}

//to print the order in sorted way
void preOrderPrint(node* root){
    if (root == NULL)
    {
        return ;
    }
    //left->root->right
    //recursive
    cout<<root->data<<"," ;
    preOrderPrint(root->left);
    preOrderPrint(root->right) ;
    
}

// bool checkBST(node* root , node* min=NULL , node* max=NULL){
//     if (root == NULL)
//     {
//         return true ;
//     }
//     if (min != NULL && min->data >= root->data)
//     {
//         return false ;
//     }
//     if (max != NULL && max->data <= root->data)
//     {
//         return false ;
//     }
//     bool minCheck = checkBST(root->left , min , root) ;
//     bool maxCheck = checkBST(root->right , root , max) ;
//     return minCheck and maxCheck ;
// }
 

 // set to save all the numbers and sort them in sorted way
set<int> s ;

//numbers to print between start and end
void printNumbersBetween(node* root , int start , int end){
    // base case
    if (root == NULL)
    {
        return ;
    }
    // if number is in between then print it and check more in left and right 
    if (root->data > start and root->data < end )
    {
        s.insert(root->data) ;
        printNumbersBetween(root->left , start , end) ;
        printNumbersBetween(root->right , start , end) ;
    }
    //if number is start print it and find in right more
    if (root->data == start)
    {
        s.insert(root->data) ;
        printNumbersBetween(root->right , start , end) ;
    }
    // if number is end then find another in left
    if (root->data == end)
    {
        s.insert(root->data) ;
        printNumbersBetween(root->left , start , end) ;
    }
    // if number is more than end then find another in left
    if (root->data > end)
    {
        printNumbersBetween(root->left , start , end) ;
    }
    // if number is less than start then find another in left
    if (root->data < start )
    {
        printNumbersBetween(root->right , start , end) ;
    }
    
}

int main(){
   node* root = buildTree() ;
   //inOrderPrint(root) ;
   cout<<endl ;
   bfs(root) ;
   cout<<endl ;
   preOrderPrint(root) ;
   cout<<"***********************"<<endl ;
   int start = 20 ;
   int end = 70 ;
   printNumbersBetween(root , start , end) ; 
   for ( auto x :s)
   {
       cout<<x<<" " ;
   }
   
    return 0;

}
