#include <iostream>
#include <bits/stdc++.h>
#include<queue>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    int diameter ;
    int height ;
};
// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

//efficient way to find out diameter in o(N) complexity
Pair efficientDiameter(node* root){
    Pair p ;
    if (root == NULL)
    {
        p.height = p.diameter = 0 ;
        return p ;
    }
    //post order 
    Pair left = efficientDiameter(root->left) ;
    Pair right = efficientDiameter(root->right) ;
    p.height = max(left.height , right.height) +1 ;
    p.diameter = max(left.height + right.height , max(left.diameter , right.diameter)) ;
    return p ;
    
}


int main(){
    int k ;
   node* root = buildTree() ;
   Pair answer = efficientDiameter(root) ;
   cout<<answer.height<<" "<<answer.diameter<<" " ;
    return 0;
}
