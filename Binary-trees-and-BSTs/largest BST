Problem Name: Largest BST in a Binary Tree
Problem Difficulty: 2
Problem Constraints: 2 ≤ N ≤ 10^3
Problem Description:
Given a Binary Tree, write a program that returns the size of the largest subtree which is also a Binary Search Tree (BST)

Input Format: The first line of input will contain an integer n.
The next line will contain n integers denoting the the preorder traversal of the BT. The next line will contain n more integers denoting the inorder traversal of the BT.
Sample Input: 4
60 65 50 70
50 65 60 70
Output Format: A single integer denoting the size ( no of nodes in tree ) of largest BST in the given tree.
Sample Output: 2

**************************************************************************************************************************************************************************
#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<vector>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

// a structure to store particular values within it 
struct Info
{
    int max ;
    int min ;
    bool isBST ;
    int size ;
    int ans ;
};

// find largest BST within the tree
Info largestBST(node* root){
    // if its null return certain values
    if (root == NULL)
    {
        return {INT_MAX , INT_MIN , true , 0 , 0};
    }
    //leaf node : 
    if (root->left == NULL and root->right == NULL)
    {
        return {root->data , root->data ,true , 1 , 1} ;
    }
    //calculate all the answers from left and right
    Info leftAns = largestBST(root->left) ;
    Info rightAns = largestBST(root->right) ;

    Info I ;
    //increase the size by 1 always for every node
    I.size = (leftAns.size + rightAns.size +1 );
    //check if underlying nodes have any BST
    if (leftAns.isBST && rightAns.isBST && root->data > leftAns.max && root->data < rightAns.min)
    {   //it's a BST
        I.isBST = true ;
        //maximum & minimum from this whole BST containing this root node
        I.max = max(rightAns.max , max(leftAns.max , root->data) );
        I.min = min(leftAns.min , min(rightAns.min , root->data));
        // answer would be this BST as it is a newer and larger one
        I.ans = I.size ;
        return I ;
    }
    // if there's not a BST underlying
    //maximum from left and right 
    I.ans = max(leftAns.ans , rightAns.ans);
    // If there's no BST underlying then by including the root there would be no BST 
    I.isBST = false ;
    return I ;
}

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};


// breadth first search -- to print the tree in o(N) complexity
void bfs(node* root){
    static int i = 0 ;
    queue<node*> q ;
    q.push(root) ;
    q.push(NULL) ;
    while (!q.empty())
    {
        node* f = q.front() ;
        if (f == NULL)
        {   i++ ;
            cout<<endl ;
            q.pop() ;
            if (!q.empty())
            {
                q.push(NULL) ;
            }
        }
        else{
            
            cout<<f->data<<" " ;
            q.pop() ;
         if (f->left)
            {
                q.push(f->left) ;
            }
            if (f->right)
            {
             q.push(f->right) ;
            }
        }
    }
    return ;
}

//build binary search tree
node* insertBinarySearchTree(node* root , int d){
    //base case
    //whenever there's null make a new node
    if (root == NULL)
    {
        return new node(d) ;
    }
    //check if given data is smaller then root data 
    //link it with left part of the node
    if (root->data > d)
    {
        root->left = insertBinarySearchTree(root->left , d) ;
    }
    //otherwise if bigger than root link it with right side
    if (root->data < d)
    {
        root->right = insertBinarySearchTree(root->right , d) ;
    }
    // no condition is met which means it's same as root then return same value
    return root ;
}

// Function to make a BST
node* buildTree(){
    int d ;
    cin>>d ;
    //initialise first node with null
    node* root = NULL ;
    //take input until -1 is met
    while (d != -1)
    {
        root = insertBinarySearchTree(root , d) ;
        cin>>d ;
    }
    return root ;
    
}

//to print the order in sorted way
void preOrderPrint(node* root){
    if (root == NULL)
    {
        return ;
    }
    //left->root->right
    //recursive
    cout<<root->data<<"," ;
    preOrderPrint(root->left);
    preOrderPrint(root->right) ;
    
}
 
int main(){
   node* root = buildTree() ;
   //inOrderPrint(root) ;
   cout<<endl ;
   bfs(root) ;
   cout<<endl ;
   preOrderPrint(root) ;
   cout<<"***********************"<<endl ;
   Info answer= largestBST(root) ;
   cout<<endl<<answer.ans<<endl ;
    return 0;

}
