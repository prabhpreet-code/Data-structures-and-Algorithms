#include <iostream>
#include <bits/stdc++.h>
#include<queue>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    int diameter ;
    int height ;
};
// Function to make a tree
node* buildTree(){
    int d ; 
    cin>>d ;
    if (d == -1)
    {
        return NULL ;
    }
    node* root = new node(d) ;
    root->left = buildTree() ;
    root->right = buildTree() ;
    return root ;
    
}

// replace all nodes by their sums
int sumOfNodesReplacement(node* root){
    if (root == NULL)
    {
        return 0 ;
    }
    //check if both are null means its at leaf node then basicaly dont change the data
    if (root->left == NULL and root->right == NULL)
    {
        return root->data ;
    }
    // recursive part
    int left1 = sumOfNodesReplacement(root->left) ;
    int right1 = sumOfNodesReplacement(root->right) ;
    int temp = root->data ;
    root->data = left1+right1 ;
    return temp+root->data ;
}

// breadth first search -- to print the tree in o(N) complexity
void bfs(node* root){
    queue<node*> q ;
    q.push(root) ;
    q.push(NULL) ;
    while (!q.empty())
    {
        node* f = q.front() ;
        if (f == NULL)
        {   cout<<endl ;
            q.pop() ;
            if (!q.empty())
            {
                q.push(NULL) ;
            }
        }
        else{
            cout<<f->data<<" " ;
            q.pop() ;
         if (f->left)
            {
                q.push(f->left) ;
            }
            if (f->right)
            {
             q.push(f->right) ;
            }
        }
    }
    return ;
}

int main(){
    int k ;
   node* root = buildTree() ;
   bfs(root) ;
   sumOfNodesReplacement(root) ;
   bfs(root) ;
    return 0;
}
