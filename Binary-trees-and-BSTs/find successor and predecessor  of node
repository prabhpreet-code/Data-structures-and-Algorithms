#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<climits>
using namespace std;

//Structure of a single node
class node{
    public:
    int data ;
    node*right ;
    node*left ;
    node(int d){
        data = d ;
        right = NULL ;
        left = NULL ;
    }
};

class Pair{
    public:
    
    bool check; // check balanced or not
    int height ; // calculate the height of a node
};


// breadth first search -- to print the tree in o(N) complexity
void bfs(node* root){
    queue<node*> q ;
    q.push(root) ;
    q.push(NULL) ;
    while (!q.empty())
    {
        node* f = q.front() ;
        if (f == NULL)
        {   cout<<endl ;
            q.pop() ;
            if (!q.empty())
            {
                q.push(NULL) ;
            }
        }
        else{
            cout<<f->data<<" " ;
            q.pop() ;
         if (f->left)
            {
                q.push(f->left) ;
            }
            if (f->right)
            {
             q.push(f->right) ;
            }
        }
    }
    return ;
}

//build binary search tree
node* insertBinarySearchTree(node* root , int d){
    //base case
    //whenever there's null make a new node
    if (root == NULL)
    {
        return new node(d) ;
    }
    //check if given data is smaller then root data 
    //link it with left part of the node
    if (root->data > d)
    {
        root->left = insertBinarySearchTree(root->left , d) ;
    }
    //otherwise if bigger than root link it with right side
    if (root->data < d)
    {
        root->right = insertBinarySearchTree(root->right , d) ;
    }
    // no condition is met which means it's same as root then return same value
    return root ;
}

// Function to make a BST
node* buildTree(){
    int d ;
    cin>>d ;
    //initialise first node with null
    node* root = NULL ;
    //take input until -1 is met
    while (d != -1)
    {
        root = insertBinarySearchTree(root , d) ;
        cin>>d ;
    }
    return root ;
    
}

//to print the order in sorted way
void inOrderPrint(node* root){
    if (root == NULL)
    {
        return ;
    }
    //left->root->right
    //recursive
    inOrderPrint(root->left);
    cout<<root->data<<"," ;
    inOrderPrint(root->right) ;
    
}

// bool checkBST(node* root , node* min=NULL , node* max=NULL){
//     if (root == NULL)
//     {
//         return true ;
//     }
//     if (min != NULL && min->data >= root->data)
//     {
//         return false ;
//     }
//     if (max != NULL && max->data <= root->data)
//     {
//         return false ;
//     }
//     bool minCheck = checkBST(root->left , min , root) ;
//     bool maxCheck = checkBST(root->right , root , max) ;
//     return minCheck and maxCheck ;
// }

//predecessor and successosor of a number 

void succPreOfBST(node* root , node* &pre , node* &succ , int key){
    //Base case
    if (root == NULL)
    {
        return ;
    }
    //check if number is found
    if (root->data == key)
    {   //find maximum number from left of node
        if (root->left != NULL)
        {   node* temp = root->left ;
            while (temp->right != NULL)
            {
                temp = temp->right ;
            }
            pre = temp ;
        }
        //find minimum from right of the node
        if (root->right != NULL)
        {   node* temp = root->right ;
            while (temp->left != NULL)
            {
                temp = temp->left ;
            }
            succ = temp ;
        }  
        return ; 
    }
    //if number is smaller then node find in left
    if (root->data > key)
    {   // save the successor and pass it on as successor will remain fixed
        succ = root ;
        succPreOfBST(root->left , pre , succ , key) ;
    }
    // find in right side
    else
    {   // save the predecessor and pass it on as predecessor will remain fixed
        pre = root ;
        succPreOfBST(root->right , pre , succ , key) ;
    }
    
}

int main(){
   node* root = buildTree() ;
   //inOrderPrint(root) ;
   cout<<endl ;
   bfs(root) ;
   int key = 50 ;
   node* pre = NULL ;
   node* succ = NULL ;
   succPreOfBST(root , pre , succ , key);
   if (pre != NULL and succ!= NULL)
   {
       cout<<pre->data <<endl<<succ->data ; 
   }
   else if (pre == NULL)
   {
       cout<<"NO PREDESSOR"<<" "<<succ->data ;
   }
     else if (succ == NULL)
   {
       cout<<pre->data<<" "<<"NO SUCCESSOR"; ;
   }
    
    return 0;

}
