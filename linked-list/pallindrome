#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class node{
    public:
    int data ;
    node*next ;
    node(int d){
        next = NULL ;
        data = d ;
    }
};

void insertAtHead(node* &head , int d){
    if (head == NULL)
    {
        head = new node(d) ;    
        return ;  
    }
    node*n = new node(d) ;
    n->next=head ;
    head = n ;
}

void print(node* head){
    while (head != NULL)
    {
        cout<<head->data<<" -> " ;
        head = head->next ;
    }
    cout<<endl ;
}

node* take_input(){
    int d ; 
    cin>>d ;
    node* head = NULL ;
    while (d != -1)
    {
        insertAtHead(head , d) ;
        cin>>d ;
    }
    return head ;
}


node* reverseLinkedList(node* &head ){
    
    node* c = head ;
    node* N  ;
    node* P = NULL ;
    while (c!= NULL)
    {
        N = c->next ;
        c->next = P ;
        P = c ;
        c = N ;
    }
    head = P ;
    return head ;
}

bool pallindrome(node*head){
 if (head == NULL or head->next == NULL)
    {
        return head ;
    }
    
    node *fast = head;
    node *slow = head;
    if(head == NULL || head->next==NULL)
    {
    return true;
    }
    while(fast->next!=NULL && fast!=NULL)
    {
    if(fast->next->next == NULL)
    {
    slow = slow->next;
    fast = NULL;
    break;
    }
    fast = fast->next->next;
    slow = slow->next;
    }
    if(fast == NULL)
    {

        slow = reverseLinkedList(slow);
    }
    else
    {
        slow = slow->next;
        slow = reverseLinkedList(slow);
    }
    fast = head;
    while(slow!=NULL)
    {
        if(fast->data != slow->data)
        {
         return false;
        }
        fast = fast->next;
        slow = slow->next;
    }
    return true;
}

int main(){
    
    node*head = take_input() ;
    print(head) ;

    bool decision = pallindrome(head) ;
    if (decision)
    {
        cout<<"yes pallindrome" ;
    }
    else{
        cout<<"sorrryyyyyyy no pallindrome" ;
    }
    return 0;
}
