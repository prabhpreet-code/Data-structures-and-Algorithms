________________________
|                       |
|time complexity O(N^2) |
|_______________________|


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class node{
    public:
    int data ;
    node*next ;
    node(int d){
        next = NULL ;
        data = d ;
    }
};

void insertAtHead(node* &head , int d){
    if (head == NULL)
    {
        head = new node(d) ;    
        return ;  
    }
    node*n = new node(d) ;
    n->next=head ;
    head = n ;
}



void print(node* head){
    while (head != NULL)
    {
        cout<<head->data<<" -> " ;
        head = head->next ;
    }
    cout<<endl ;
}

node* reverseLinkedList(node* head){
    if (head == NULL or head->next == NULL)
    {
        return head ;
    }
    node* shead = reverseLinkedList(head->next) ;
    node* temp = shead ;
    while (temp->next != NULL)
    {
        temp = temp->next ;
    }
    head->next = NULL ;
    temp->next = head ;
    return shead ;
    
}

node* take_input(){
    int d ; 
    cin>>d ;
    node* head = NULL ;
    while (d != -1)
    {
        insertAtHead(head , d) ;
        cin>>d ;
    }
    return head ;
}

int main(){
    node* head = take_input() ;
    print(head) ;
    
    node* tempHead = reverseLinkedList(head) ;
    print(tempHead) ;
    
    return 0;
}

*************************************************************************************************************************************************************
________________________
|                       |
|time complexity O(N)   |
|_______________________ 

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class node{
    public:
    int data ;
    node*next ;
    node(int d){
        next = NULL ;
        data = d ;
    }
};

void insertAtHead(node* &head , int d){
    if (head == NULL)
    {
        head = new node(d) ;    
        return ;  
    }
    node*n = new node(d) ;
    n->next=head ;
    head = n ;
}



void print(node* head){
    while (head != NULL)
    {
        cout<<head->data<<" -> " ;
        head = head->next ;
    }
    cout<<endl ;
}

node* reverseLinkedList(node* head){
    if (head == NULL or head->next == NULL)
    {
        return head ;
    }
    node* shead = reverseLinkedList(head->next) ;
    node* temp = head->next ;
    head->next = NULL ;
    temp->next = head ;
    return shead ;
    
}

node* take_input(){
    int d ; 
    cin>>d ;
    node* head = NULL ;
    while (d != -1)
    {
        insertAtHead(head , d) ;
        cin>>d ;
    }
    return head ;
}

int main(){
    node* head = take_input() ;
    print(head) ;
    
    node* tempHead = reverseLinkedList(head) ;
    print(tempHead) ;
    
    return 0;
}

