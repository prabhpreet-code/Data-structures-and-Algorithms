#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class node{
    public:
    int data ;
    node*next ;
    node(int d){
        next = NULL ;
        data = d ;
    }
};

void insertAtHead(node* &head , int d){
    if (head == NULL)
    {
        head = new node(d) ;    
        return ;  
    }
    node*n = new node(d) ;
    n->next=head ;
    head = n ;
}

void insertAtTail(node* &head , int d){
    if (head == NULL)
    {
        head = new node(d) ;                    
        return ;    
    }
    node* tail = head ;
    while (tail->next != NULL)
    {
        tail = tail->next ;
    }
    tail->next = new node(d) ;
}

int length(node* head ){
    int count = 0 ;
    while (head != NULL)
    {
        count++ ;
        head = head->next ;
    }
    return count ;
    
}

void insertAtMiddle(node* &head , int d , int p){
    if (head == NULL || p == 0)
    {
        insertAtHead(head , d) ;
        return ;
    }
    else if (p >(length(head)))
    {
        insertAtTail(head , d ) ;
    }
    else{
        int jump = 1 ;
        node*temp = head ;
        while (jump <= p-1)
        {   
            temp = temp->next ;
            jump++ ;
        }
        node*n = new node(d) ;
        n->next = temp->next ;
        temp->next = n ;  

    }
    
    
}

void deleteHead(node* &head){
    if (head == NULL)
    {
        return ;
    }
    node* temp = head->next ;
    delete head ;
    head = temp ;
    
}

void deleteTail(node* &head){
    if (head == NULL)
    {
        return ;
    }
    node* temp = head ;
    node* previousElement = head ;
    while (temp ->next != NULL)
    {   previousElement = temp ;
        temp = temp->next ;
    }
    
    delete temp ;
    previousElement->next = NULL ;

}

void deleteMiddle(node* &head , int p){
    if (head == NULL)
    {
        return ;
    }
    if (p > length(head))
    {
        deleteTail(head) ;
    }
    int jump = 1 ;
    node*temp = head ;
    node*previousElement = NULL ;
    while (jump <= p-1){
            previousElement = temp ;
            temp = temp->next ;
            jump++ ;
     }
    previousElement->next = temp->next ;
    delete temp ;
}

bool searchElement(node* head , int key){
    while (head != NULL)
    {
        if (head->data == key)
        {
            return true ;
        }
        head = head->next ;
    }
    return false ;
}

void print(node* head){
    while (head != NULL)
    {
        cout<<head->data<<" -> " ;
        head = head->next ;
    }
    cout<<endl ;
}

node* take_input(){
    int d ; 
    cin>>d ;
    node* head = NULL ;
    while (d != -1)
    {
        insertAtHead(head , d) ;
        cin>>d ;
    }
    return head ;
}

int main(){
    node* head = take_input() ;
    print(head) ;
    return 0;
}
