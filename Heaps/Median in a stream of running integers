Problem Name: Median in a stream of running integers
Problem Difficulty: None
Problem Constraints: 1 < t < 100 <br>
1< n < 10000
Problem Description:
You are given a running data stream of n integers. You read all integers from that running data stream and find effective median of elements read so far in efficient way. All numbers are unique in the datastream. Print only the integer part of the median.

Input Format: First line contains integer t as number of test cases.
Each test case contains following input. First line contains integer n  which represents the length of the data stream and next line contains n space separated integers.
Sample Input: 1
6
5 15 1 3 2 8
Output Format: Print the effective median of running data stream..

Sample Output: 5 10 5 4 3 4


**********************************************************************************************************************************************************************

#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<vector>
using namespace std;
// sorted array :- running stream of medians
int main(){
    priority_queue<int> leftHeap ;//max heap
    priority_queue<int , vector<int> , greater<int>> rightHeap ;//min heap
    int d ;
    cin>>d ;
    float med = d ;
    //first number same as a median
    cout<<"median: "<< med <<endl; ;
    leftHeap.push(d) ;

    cin>>d ; // second number
    while (d != -1 )
    {   //size of max heap is large i.e leftheap
        if (leftHeap.size() > rightHeap.size()) 
        {
            if (d < med)//recent number is larger than prev median
            {   //took out the maximum from left and put it into right remove it and push new one to left
                rightHeap.push(leftHeap.top()) ;
                leftHeap.pop() ;
                leftHeap.push(d) ;
            }
            else{
                //push to right simply
                rightHeap.push(d) ;
            }
            //calculate median of max from left and min from right
            med = (leftHeap.top()+rightHeap.top())/2.0 ;//float 2.0 as it will keep med in float
        }
        //same size
        else if(leftHeap.size() == rightHeap.size()){
             if (d < med)
            {   
                leftHeap.push(d) ;
                med = leftHeap.top() ;
            }
            else{
                rightHeap.push(d) ;
                med = rightHeap.top() ;
            }
        }
        else{
            if (d > med)
            {   leftHeap.push(rightHeap.top()) ;
                //int temp = rightHeap.top() ;
                rightHeap.pop() ;
                rightHeap.push(d) ;
            }
            else{
                leftHeap.push(d) ;
            }
            med = (leftHeap.top()+rightHeap.top())/2.0 ;
        }
        cout<<"median:"<< med <<endl ;//print the value
        cin>>d ;//take input again and again till -1
    }
    
    return 0;

}
