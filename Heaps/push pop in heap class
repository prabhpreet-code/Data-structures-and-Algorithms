#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<vector>
using namespace std;

//Structure of a Heap
class Heap{
    vector<int> v ;//to store the elements and their parents
    bool isMin ; // min heap or max heap
    // function for minimum or maximum calculation
    bool compare(int a , int b){
        if (isMin)
        {
            return a<b ;
        }
        else{
            return a>b ;
        }
        
    }

    public:
    // constructor
    Heap(int d = 10 , bool minOrMax = true){
        //to reserve some place in vector after which push_back will double the memory every time
        v.reserve(d) ;
        // push_back first element as -1 to block the place
        v.push_back(-1) ;
        isMin = minOrMax ;
    }

    // push a element in O(logn)
    void push(int element){
        v.push_back(element) ;//push to last
        int idx = v.size() -1 ;//size -1 as first place is blocked
        int parent = idx/2 ; // parent : for left child 2[i] and right 2[i]+1
        //index should be more than 1 and check to make it as min heap or max heap
        while (idx >1 and compare(v[idx] , v[parent]))
        {   // swap the elements
            swap(v[idx] , v[parent]) ;
            // re assign the values
            idx = parent ;
            parent = parent/2 ;
        }   
    }
    int front(){
        return v[1] ;
    }
// set it again as max or min heap
    void heapify(int index){
        int left = 2*index ; // parent's left node
        int right = left+1 ; //parent's right node
        int minIndex = index ; // mark it as minIndex
        int size = v.size()-1 ; //size
        //check if left child is bigger or smaller then parent
        if (left <= size and compare(v[left] , v[index]) ) //left should be within size and less or more than parent 
        {
            minIndex = left ; // according to min or max heap if condition satisfies make it as minIndex
        }
         //check if right child is bigger or smaller then minIndex
        if (right <= size and compare(v[right] , v[minIndex]))
        {
            minIndex = right ; // according to min or max heap if condition satisfies make it as minIndex
        }
        //if minIndex is not changed 
        if (minIndex != index)
        {   
            swap(v[minIndex] , v[index]) ;
            heapify(minIndex) ;
        }
        
    }
    //delete first element
    void pop(){
        int size = v.size() -1 ;//size -1 as first index is blocked
        swap(v[1] , v[size]) ; // swap first element with last so as to comfortably delete the element
        v.pop_back() ; // delete last element
        heapify(1) ;// make all the tree max or min heap again
    }
    bool empty(){
        return v.size() == 1 ;
    }
};


 
int main(){
    Heap h(10 , true) ;
    cout<<"Enter numbers:"<<endl ;
    int count = 5 , no ;
    for (int i = 0; i < count; i++)
    {   
        cin>>no ;
        h.push(no) ;
    }
    cout<<endl ;
    while (!h.empty())
    {
        cout<<h.front()<<" " ;
        h.pop() ;
    }
    
    return 0;

}
