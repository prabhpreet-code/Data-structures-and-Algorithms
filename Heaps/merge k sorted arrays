Problem Name: Merge K sorted Arrays
Problem Difficulty: None
Problem Constraints: Elements of array <= |10^15| <br>
N <= 10^5 <br>
K <= 10
Problem Description:
Given K sorted arrays each with N elements merge them and output the sorted array

Input Format: First line contains 2 space separated integers K and N. <br>
Next  lines contain K*N space separated integers 
Sample Input: 3 4
1 3 5 7 2 4 6 8 0 9 10 11
Output Format: Single line consisting of space separated numbers
Sample Output: 0 1 2 3 4 5 6 7 8 9 10 11

******************************************************************************************************************************************************************
O(NlogK)

#include <iostream>
#include <bits/stdc++.h>
#include<queue>
#include<vector>
using namespace std;

typedef pair<int , pair<int , int>> nodee ;//a pair to contain value along with its x position and y position

int main(){
    //heap to contain pair node type within it
    priority_queue<nodee , vector<nodee> , greater<nodee>> pq ;
    vector<int> result ;//contain final sorted vector
    vector<vector<int>> arr{{2,6,12,15},
                            {1,3,14,20},
                            {3,5,8,10}} ;

    // push all the 0th elements of all the arrays
    for (int i = 0; i < arr.size(); i++)
    {   cout<<"num "<< i<<endl ;
        pq.push({arr[i][0] , {i , 0}}) ;
    }
    //till heap is not empty
    while (!pq.empty())
    {
        nodee current = pq.top() ;//current node type pair
        pq.pop() ;//pop it out
        int element = current.first ;// current value
        int x = current.second.first ;//current x position
        int y = current.second.second ;// current y position
        result.push_back(element) ;//push in the value in final vector
        
        // check in if the next element of an array is within range
        if (y+1 < arr[x].size())
        {
            pq.push({arr[x][y+1] , {x,y+1}}) ;//push in next node in the heap of particular array whose value has been saved in the final array
        }
         
    }
    //print
    for(auto x:result){
        cout<<x<<" " ;
    }   
    return 0;

}
